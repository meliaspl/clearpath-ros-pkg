"""autogenerated by genmsg_py from ChameleonSense.msg. Do not edit."""
import roslib.message
import struct


class ChameleonSense(roslib.message.Message):
  _md5sum = "c898ed18685ac0e3eece998b04aeace2"
  _type = "chameleon_msgs/ChameleonSense"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Encoder travel (m)
float32 travel_left
float32 travel_right

# Encoder speed (m/s)
float32 speed_left
float32 speed_right

# Output PWM (-1..1)
float32 pwm_left
float32 pwm_right

# Battery (V)
float32 voltage

"""
  __slots__ = ['travel_left','travel_right','speed_left','speed_right','pwm_left','pwm_right','voltage']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       travel_left,travel_right,speed_left,speed_right,pwm_left,pwm_right,voltage
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ChameleonSense, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.travel_left is None:
        self.travel_left = 0.
      if self.travel_right is None:
        self.travel_right = 0.
      if self.speed_left is None:
        self.speed_left = 0.
      if self.speed_right is None:
        self.speed_right = 0.
      if self.pwm_left is None:
        self.pwm_left = 0.
      if self.pwm_right is None:
        self.pwm_right = 0.
      if self.voltage is None:
        self.voltage = 0.
    else:
      self.travel_left = 0.
      self.travel_right = 0.
      self.speed_left = 0.
      self.speed_right = 0.
      self.pwm_left = 0.
      self.pwm_right = 0.
      self.voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.travel_left, _x.travel_right, _x.speed_left, _x.speed_right, _x.pwm_left, _x.pwm_right, _x.voltage))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.travel_left, _x.travel_right, _x.speed_left, _x.speed_right, _x.pwm_left, _x.pwm_right, _x.voltage,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.travel_left, _x.travel_right, _x.speed_left, _x.speed_right, _x.pwm_left, _x.pwm_right, _x.voltage))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.travel_left, _x.travel_right, _x.speed_left, _x.speed_right, _x.pwm_left, _x.pwm_right, _x.voltage,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7f = struct.Struct("<7f")
