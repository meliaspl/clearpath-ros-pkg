/* Auto-generated by genmsg_cpp for file /home/mpurvis/Clearpath/r200/software/ros-pkg/chameleon_msgs/msg/ChameleonSense.msg */
#ifndef CHAMELEON_MSGS_MESSAGE_CHAMELEONSENSE_H
#define CHAMELEON_MSGS_MESSAGE_CHAMELEONSENSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace chameleon_msgs
{
template <class ContainerAllocator>
struct ChameleonSense_ : public ros::Message
{
  typedef ChameleonSense_<ContainerAllocator> Type;

  ChameleonSense_()
  : travel_left(0.0)
  , travel_right(0.0)
  , speed_left(0.0)
  , speed_right(0.0)
  , pwm_left(0.0)
  , pwm_right(0.0)
  , voltage(0.0)
  {
  }

  ChameleonSense_(const ContainerAllocator& _alloc)
  : travel_left(0.0)
  , travel_right(0.0)
  , speed_left(0.0)
  , speed_right(0.0)
  , pwm_left(0.0)
  , pwm_right(0.0)
  , voltage(0.0)
  {
  }

  typedef float _travel_left_type;
  float travel_left;

  typedef float _travel_right_type;
  float travel_right;

  typedef float _speed_left_type;
  float speed_left;

  typedef float _speed_right_type;
  float speed_right;

  typedef float _pwm_left_type;
  float pwm_left;

  typedef float _pwm_right_type;
  float pwm_right;

  typedef float _voltage_type;
  float voltage;


private:
  static const char* __s_getDataType_() { return "chameleon_msgs/ChameleonSense"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c898ed18685ac0e3eece998b04aeace2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Encoder travel (m)\n\
float32 travel_left\n\
float32 travel_right\n\
\n\
# Encoder speed (m/s)\n\
float32 speed_left\n\
float32 speed_right\n\
\n\
# Output PWM (-1..1)\n\
float32 pwm_left\n\
float32 pwm_right\n\
\n\
# Battery (V)\n\
float32 voltage\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, travel_left);
    ros::serialization::serialize(stream, travel_right);
    ros::serialization::serialize(stream, speed_left);
    ros::serialization::serialize(stream, speed_right);
    ros::serialization::serialize(stream, pwm_left);
    ros::serialization::serialize(stream, pwm_right);
    ros::serialization::serialize(stream, voltage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, travel_left);
    ros::serialization::deserialize(stream, travel_right);
    ros::serialization::deserialize(stream, speed_left);
    ros::serialization::deserialize(stream, speed_right);
    ros::serialization::deserialize(stream, pwm_left);
    ros::serialization::deserialize(stream, pwm_right);
    ros::serialization::deserialize(stream, voltage);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(travel_left);
    size += ros::serialization::serializationLength(travel_right);
    size += ros::serialization::serializationLength(speed_left);
    size += ros::serialization::serializationLength(speed_right);
    size += ros::serialization::serializationLength(pwm_left);
    size += ros::serialization::serializationLength(pwm_right);
    size += ros::serialization::serializationLength(voltage);
    return size;
  }

  typedef boost::shared_ptr< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chameleon_msgs::ChameleonSense_<ContainerAllocator>  const> ConstPtr;
}; // struct ChameleonSense
typedef  ::chameleon_msgs::ChameleonSense_<std::allocator<void> > ChameleonSense;

typedef boost::shared_ptr< ::chameleon_msgs::ChameleonSense> ChameleonSensePtr;
typedef boost::shared_ptr< ::chameleon_msgs::ChameleonSense const> ChameleonSenseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::chameleon_msgs::ChameleonSense_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace chameleon_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c898ed18685ac0e3eece998b04aeace2";
  }

  static const char* value(const  ::chameleon_msgs::ChameleonSense_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc898ed18685ac0e3ULL;
  static const uint64_t static_value2 = 0xeece998b04aeace2ULL;
};

template<class ContainerAllocator>
struct DataType< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chameleon_msgs/ChameleonSense";
  }

  static const char* value(const  ::chameleon_msgs::ChameleonSense_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Encoder travel (m)\n\
float32 travel_left\n\
float32 travel_right\n\
\n\
# Encoder speed (m/s)\n\
float32 speed_left\n\
float32 speed_right\n\
\n\
# Output PWM (-1..1)\n\
float32 pwm_left\n\
float32 pwm_right\n\
\n\
# Battery (V)\n\
float32 voltage\n\
\n\
";
  }

  static const char* value(const  ::chameleon_msgs::ChameleonSense_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.travel_left);
    stream.next(m.travel_right);
    stream.next(m.speed_left);
    stream.next(m.speed_right);
    stream.next(m.pwm_left);
    stream.next(m.pwm_right);
    stream.next(m.voltage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ChameleonSense_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chameleon_msgs::ChameleonSense_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::chameleon_msgs::ChameleonSense_<ContainerAllocator> & v) 
  {
    s << indent << "travel_left: ";
    Printer<float>::stream(s, indent + "  ", v.travel_left);
    s << indent << "travel_right: ";
    Printer<float>::stream(s, indent + "  ", v.travel_right);
    s << indent << "speed_left: ";
    Printer<float>::stream(s, indent + "  ", v.speed_left);
    s << indent << "speed_right: ";
    Printer<float>::stream(s, indent + "  ", v.speed_right);
    s << indent << "pwm_left: ";
    Printer<float>::stream(s, indent + "  ", v.pwm_left);
    s << indent << "pwm_right: ";
    Printer<float>::stream(s, indent + "  ", v.pwm_right);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CHAMELEON_MSGS_MESSAGE_CHAMELEONSENSE_H

